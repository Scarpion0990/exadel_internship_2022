resource "aws_instance" "web-server" {
  ami                    = data.aws_ami.latest-ubuntu.id
  instance_type          = var.instance_type
  key_name               = "webserver-key"
  vpc_security_group_ids = [aws_security_group.public.id]
  user_data              = data.template_file.user_data.rendered

  provisioner "file" {
    source      = "./centos-key.pem"
    destination = "/home/ubuntu/centos-key.pem"

    connection {
      type        = "ssh"
      user        = "ubuntu"
      private_key = file("${path.module}/webserver-key.pem")
      host        = self.public_ip
    }
  }

  provisioner "remote-exec" {
    inline = ["chmod 400 ~/centos-key.pem"]

    connection {
      type        = "ssh"
      user        = "ubuntu"
      private_key = file("${path.module}/webserver-key.pem")
      host        = self.public_ip
    }
  }

  tags = {
    Name = "Ubuntu-server"
  }
}

resource "aws_instance" "centos-server" {
  image_id                    = data.aws_ami.centos.id
  instance_type               = var.instance_type
  associate_public_ip_address = false
  key_name                    = "centos-key"
  subnet_id                   = data.aws_subnets.default.id
  vpc_security_group_ids      = [aws_security_group.private.id]

  tags = {
    Name = "CentOS7-server"
  }
}

resource "aws_security_group" "public" {
  name        = "${var.cluster_name}-public"
  description = "Allow SSH,HTTP,HTTPS, ICMP inbound traffic"

  dynamic "ingress" {
    iterator = port
    for_each = var.ingress_ports
    content {
      from_port   = port.key
      to_port     = port.key == 8 ? local.any_port : port.key
      protocol    = port.value
      cidr_blocks = local.all_ips
    }
  }
}

resource "aws_security_group_rule" "allow_all_outbound" {
  type              = "egress"
  security_group_id = aws_security_group.public.id

  from_port   = local.any_port
  to_port     = local.any_port
  protocol    = local.any_protocol
  cidr_blocks = local.all_ips
}

resource "aws_security_group" "private" {
  name        = "${var.cluster_name}-private"
  description = "Allow SSH, ICMP, HTTP,HTTPS inbound traffic"

  dynamic "ingress" {
    iterator = port
    for_each = var.ingress_ports
    content {
      from_port   = port.key
      to_port     = port.key == 8 ? local.any_port : port.key
      protocol    = port.value
      cidr_blocks = local.priv_ips
    }
  }
}

resource "aws_security_group_rule" "allow_all_outbound_in_zone" {
  type              = "egress"
  security_group_id = aws_security_group.private.id

  from_port   = local.any_port
  to_port     = local.any_port
  protocol    = local.any_protocol
  cidr_blocks = local.priv_ips
}

locals {
  any_port     = 0
  any_protocol = "-1"
  all_ips      = ["0.0.0.0/0"]
  priv_ips     = ["10.0.0.0/16"]
}

resource "aws_vpc" "main" {
  cidr_block = var.vpc_cidr_block

  tags = {
    Name = "exadel-vpc"
  }
}

resource "aws_subnet" "public_subnet" {
  vpc_id                  = aws_vpc.main.id
  map_public_ip_on_launch = true
  cidr_block              = var.public_subnet_cidr_block

  tags = {
    Name = "public_subnet"
  }
}

resource "aws_subnet" "private_subnet" {
  vpc_id     = aws_vpc.main.id
  cidr_block = var.private_subnet_cidr_block

  tags = {
    Name = "private_subnet"
  }
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "exadel internet gateway"
  }
}

resource "aws_eip" "nat_eip" {
  vpc        = true
  depends_on = [aws_internet_gateway.igw]

  tags = {
    Name = "Exadel-Elastic-IP"
  }
}

resource "aws_nat_gateway" "nat_gateway" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public_subnet.id

  tags = {
    Name = "Exadel-NAT-GW"
  }
}

resource "aws_route_table" "public" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = var.internet
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "exadel_RTB"
  }
}

resource "aws_route_table_association" "public" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public.id
}
